WOF Racer

INSTRUCTIONS FOR USE:

1.	BE RESPECTFUL using this script.  Don't do anything that risks the integrity or security of the web server or API.  Please keep the loops to 30 seconds or longer.
	Use at your own risk; this script can impact your $WOF won either positively OR negatively, so use with caution and with frequent monitoring!

2.	PREREQUISITES:
	You will need to run a simple web server - there are two options (pick one):
		1. 	Visual Studio Code
			This is the best option as it will bring up a browser that will allow opening files locally, which is needed for the script to run correctly.
			https://code.visualstudio.com/download
			Once it is installed, you will need one other component called Live Server:  From the left-hand navigation panel click "Extensions" (the last icon),
			and in the Search bar type "Live Server" (no quotes), and select the one by Ritwick Dey.  Install this extension - this will allow you to run
			a local web server from within Visual Studio Code.
			Once Live Server is installed, click the Explorer icon on the navigation panel (top left icon), then from the File menu select Open Folder, 
			and navigate to the folder with racer.html and click OK.  VS Code should present the list of all the files in the folder, with racer.html opened.
			Don't do this yet - you need to complete #3 below first - when ready, click on the bottom blue status bar in VS Code where it reads "Go Live" -
			this should open the racer.html page in a new browser.  If it shows a list of files, simply navigate to the racer.html file.
			Note:  Always use VS Code and Live Server to navigate to the racer.html page; trying to navigate from another other browser or other instance of Chrome
			will likely not work.
			NOTE - BE SURE TO COMPLETE THE STEPS IN #3 BELOW BEFORE NAVIGATING TO THE RACER.HTML PAGE.
		OR 2. 	Use Python:
			From a command prompt or terminal, navigate to the folder with racer.html, then run one of the 2 commands, depending on which version of Python you have:
				python -m SimpleHTTPServer 
				or 
				python3 -m http.server 
			Further instructions can be found here:  https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server
			Note I don't recommend using this option as you will need to manually run Chrome in an insecure mode.
			If you want to use this option, follow the instructions in the article here to run Chrome in a mode that will allow opening files locally.
			Please read ALL responses as several options are given.
				https://stackoverflow.com/questions/3102819/disable-same-origin-policy-in-chrome
			Once the local Python http server is running and you started up Chrome, you can navigate to the racer.html page via:
				http://localhost:8000/racer.html 
			NOTE - BE SURE TO COMPLETE THE STEPS IN #3 BELOW BEFORE NAVIGATING TO THE RACER.HTML PAGE.
	
	
3.	BEFORE RUNNING THE SCRIPT:  
	If you have run the previous version of this script using python, simply copy your older mysettings.json to the folder with the racer.html file, and replace
	the existing version.
	If you are doing this for the first time and/or do not have a copy of mysettings.json from using the previous script, open mysettings.json that comes 
	with the racer.html and other files, and change the following:
	a.	Change the value in "wallet_address" to your wallet's value and the value in "authorization_key" to your browser's authorization key.
		How to find the authorization key (for most browsers) - note you will need to connect your wallet to the WOF website if you haven't done so already:
		1.	Open the Developer Tools panel (F12)
		2.	Click on the Network tab. 
		3.	Navigate to the Upcoming races tab and find a race to join; before joining, in the Network panel clear the results so it will be easier to find the row in the next step.
		4.	Click "Join the Race" on the race you want to join; then in the Network panel find the second "join" entry - click this and click the "Headers" tab.  
			Under "Request Headers" should be an entry called "Authorization" - right-click on this and Copy Value, and paste it in the authorization_key value in mysettings.json

	b.	Update the participation_threshold value:  Set this to the minimum number of participants a race will need before the script enters your best vehicle.  
		A higher number means your vehicle will be back in your fleet more quickly for faster reuse, but there is a chance you may miss out on the race if it fills very quickly.
		A lower number means you will more likely get in the race, but your vehicle will be locked from reuse for a longer period.

	c.	Update excluded_vehicles to list any vehicles you do not want to include in any race regardless of performance.  Enter each vehicle's token ID, separated by commas.

4.	Now you can run the racer.html page using whichever method you chose above.
	If you have completed everything correctly, then very quickly you should see the list of unjoined races on the left panel and a list of joined races on the right panel.
	In the left panel you should see under each race box the Race Class (Ground, Air, etc.), Race Name, the # of participants and race distance, 
	and "Your Best" picked vehicle.  On the right side of the race box are some icons - your WOF's image, a letter abbreviation for the terrain type, 
	and an icon for the weather type.  At the moment there are no actions you can take - everything is automatic.
	You may notice that the same vehicle is selected for multiple unjoined races - this is normal.  Once that vehicle actually enters a race, though, it will be eliminated
	from consideration and the list of races will be refreshed with the new "Your Best" recalculated for each race.
	Vehicles will return for use once the race appears in "Next to Race" (note this panel is not yet available in this script; you can currently view it on the WOF website).

5.  This script is designed for picking the best based on the following criteria:
	a.	Number of Trips the vehicle will need to make, calculated by the math ceiling of the Cargo Weight (in kg) divided by Weight Capacity (in kg).
		For example, if cargo/capacity = 1.01, then the number of trips = 2.
		If the vehicle requires more than 5 trips, it will be excluded from consideration in the race.
	b.  The vehicle's true race distance, which is the race's original distance plus twice the number of extra trips needed.
		The formula: True Race Distance = (Race Original Distance x ((Number of Trips - 1) x 2)) + Race Original Distance.
		For example, if the number of trips is 1 and the race distance is 1000, the range if 1000.  If the number of trips is 2, then the final distance is 3000.
	c.	Number of Refuels
		This is the simply the math ceiling of (True Race Distance divided by Vehicle Max Range).  For example True Race Distance = 3000 and Vehicle Max Range = 499 = 6.01, or a ceiling of 7 refuels.
		If the vehicle requires more than 5 refuels, it will be excluded from consideration in the race.
	d.  Acceleration and Deceleration delay
		This is the amount of time (in seconds) the vehicle is delayed for any refueling, so it is multiplied by the number of refuels needed.
		It is impacted by Emissions (lower emissions = lower acceleration/deceleration delays), and by the vehicle's type.  Both of these are black boxes (unknown to racers), 
		so these are generated by best guesses, by this formula:
		(Vehicle Type Delay # of Seconds) * (Number of Refuels - 1) * (Vehicle Emission Rate/10).  This will be tweaked as more information becomes available.
	e.	Weather and Terrain.  
		We know that these affect vehicles in some manner but these are also black boxes, so until more is known, currently all of these are set to a factor of 1,
		and thus don't currently affect the final selection. In a future version of the script hese will become adjustable, 
		as either a multiplier value (to increase/decrease the base time) or a fixed # of seconds as an additive or subtractive value.
	
	Once vehicles are restricted by the criteria above, the final set is sorted by final adjusted time,
	and the first vehicle in this set is selected for racing.  If you wish to race your worst vehicles for the lottery, you can make one change in racer.js:
		Change: 
			availableVehiclesToRace.sort(function(a, b) {return a.finalAdjustedTime > b.finalAdjustedTime ? 1 : -1});
		to:
			availableVehiclesToRace.sort(function(a, b) {return a.finalAdjustedTime < b.finalAdjustedTime ? 1 : -1});
			
	Switching the > sign to a < sign will sort the eligible vehicles by the criteria above in Descending order instead, basically setting the finalAdjustedTime order from worst to best.
	
	The script will only join a race once every 30 seconds, even if there are multiple races detected above your participation threshold - please do not increase this frequency.
	
	Future versions of this script will provide more analysis tools as well as options to let you adjust certain variables like terrain:vehicle and weather:vehicle factors, and many more options.
			
6.  You can now update your personal settings on the Settings tab.  You can adjust your authorization key excluded-vehicles list, Refresh Rate (not more frequent than 30 seconds), and wallet address.
	If you adjust the Excluded Vehicles list, the script will reselect your best vehicles automatically.
	When you click Save, a new mysettings.json file will be generated and downloaded to your Downloads folder - simply copy this version and replace your existing
	mysettings.json file wherever you're running this script.

7.	Lastly, but most of all, HAVE FUN!  This script is not meant to be a substitute for your engagement, but rather give you another tool to better understand how your vehicles perform and how you can 
	optimize their performances.  Please remember to keep an eye on the running script from time to time to make sure it isn't doing anything unexpected.  And stay engaged in the community!
		
Please report any bugs to Galaphine#5831 in the WorldOfFreight Discord.  Thank you!
